1.	 Section: Database Overview

CREATE SCHEMA colonial_journey_management_system_db;

USE colonial_journey_management_system_db;

2.	 Section: Data Definition Language (DDL) 

CREATE TABLE planets(
id INT(11) PRIMARY KEY,
`name` VARCHAR(30)NOT NULL);

CREATE TABLE spaceports(
id INT(11) PRIMARY KEY,
`name` VARCHAR(50)NOT NULL,
planet_id INT(11),
CONSTRAINT fk_planet_id FOREIGN KEY (planet_id) REFERENCES planets (id));

CREATE TABLE spaceships(
id INT(11) PRIMARY KEY,
`name` VARCHAR(50) NOT NULL,
`manufacturer` VARCHAR(30)NOT NULL,
light_speed_rate INT(11) DEFAULT 0);

CREATE TABLE colonists(
id INT(11) PRIMARY KEY,
first_name VARCHAR(20) NOT NULL,
last_name VARCHAR(20) NOT NULL,
ucn CHAR(10) NOT NULL UNIQUE,
birth_date DATE NOT NULL);

CREATE TABLE journeys(
id INT(11) PRIMARY KEY,
journey_start DATETIME NOT NULL,
journey_end DATETIME NOT NULL,
purpose ENUM("Medical", "Technical", "Educational", "Military"),
destination_spaceport_id INT(11),
spaceship_id INT(11),
CONSTRAINT fk_spaceport_id FOREIGN KEY (destination_spaceport_id) REFERENCES spaceports (id),
CONSTRAINT fk_spaceship_id FOREIGN KEY (spaceship_id) REFERENCES spaceships (id));

CREATE TABLE travel_cards(
id INT(11) PRIMARY KEY,
card_number CHAR(10) NOT NULL UNIQUE,
job_during_journey ENUM("Pilot", "Engineer", "Trooper", "Cleaner", "Cook"),
colonist_id INT(11),
journey_id INT(11),
CONSTRAINT fk_journey_id FOREIGN KEY (journey_id) REFERENCES journeys (id),
CONSTRAINT fk_colonist_id FOREIGN KEY (colonist_id) REFERENCES colonists (id));

3.	 Section: Data Manipulation Language (DML)
3.1  Data insertion

INSERT INTO travel_cards (card_number, job_during_journey, colonist_id, journey_id)
SELECT IF(birth_date >= '1980-01-01', concat(year(birth_date), day(birth_date), left(ucn, 4)),
CONCAT(year(birth_date), month(birth_date), right(ucn, 4))) AS card_number,
CASE
WHEN id % 2 = 0 THEN 'Pilot'
WHEN id % 3 = 0 THEN 'Cook'
ELSE 'Engineer'
END
AS job_during_journey,
id,
LEFT(ucn,1) AS journey_id
FROM colonists
WHERE id BETWEEN 96 AND 100;

3.2  Data update

UPDATE journeys
SET purpose =
CASE
WHEN id % 2 = 0 THEN 'Medical'
WHEN id % 3 = 0 THEN 'Technical'
WHEN id % 5 = 0 THEN 'Educational'
WHEN id % 7 = 0 THEN 'Military'
END
WHERE id % 2 = 0 OR id % 3 = 0 OR id % 5 = 0 OR id % 7 = 0;

3.3  Data deletion

DELETE c
FROM colonists AS c
LEFT JOIN travel_cards AS t on c.id=t.colonist_id
WHERE t.colonist_id IS NULL;

4.	 Section: Querying 
4.1  Extract all travel cards

SELECT card_number, job_during_journey from travel_cards
ORDER BY card_number;

4.2  Extract all colonists

SELECT id, concat_ws(' ', first_name, last_name), ucn FROM colonists
ORDER BY first_name,last_name,id;

4.3	 Extract all military journeys

SELECT id, journey_start, journey_end FROM journeys
WHERE purpose = 'Military'
ORDER BY journey_start;

4.4  Extract all pilots

SELECT c.id, concat_ws(' ', c.first_name, c.last_name) FROM colonists as c
JOIN travel_cards AS t ON c.id=t.colonist_id
WHERE t.job_during_journey = 'Pilot'
ORDER BY c.id;

4.5	 Count all colonists that are on technical journey

SELECT count(c.id) FROM colonists as c
JOIN travel_cards AS t ON c.id=t.colonist_id
JOIN journeys AS j on t.journey_id=j.id
WHERE j.purpose = 'Technical';

4.6  Extract the fastest spaceship

SELECT ss.`name`, sp.`name` FROM spaceships AS ss
JOIN journeys AS j on j.spaceship_id=ss.id
JOIN spaceports AS sp on j.destination_spaceport_id=sp.id
ORDER BY light_speed_rate DESC
LIMIT 1;

4.7  Extract spaceships with pilots younger than 30 years

SELECT ss.`name`, ss.manufacturer FROM spaceships AS ss
JOIN journeys AS j ON j.spaceship_id = ss.id
JOIN travel_cards AS tc ON j.id = tc.journey_id
JOIN colonists as c ON tc.colonist_id = c.id
WHERE tc.job_during_journey = 'Pilot' AND 2019 - year(c.birth_date) < 30
GROUP by ss.id
ORDER BY ss.name;

4.8  Extract all educational mission planets and spaceports

SELECT p.`name`, sp.`name` FROM planets as p
JOIN spaceports AS sp ON p.id = sp.planet_id
JOIN journeys AS j ON sp.id = j.destination_spaceport_id
WHERE j.purpose = 'Educational'
ORDER BY sp.`name` DESC;

4.9  Extract all planets and their journey count

SELECT p.`name`, COUNT(j.id) AS count FROM planets as p
JOIN spaceports AS sp ON p.id = sp.planet_id
JOIN journeys AS j ON j.destination_spaceport_id = sp.id
GROUP BY p.id
ORDER BY count DESC, p.`name` ASC;

4.10 Extract the shortest journey

SELECT j.id, p.`name`, sp.`name`, j.purpose from journeys AS j
JOIN spaceports AS sp ON sp.id=j.destination_spaceport_id
JOIN planets AS p ON sp.planet_id=p.id
ORDER BY j.journey_end-j.journey_start
LIMIT 1;

4.11 Extract the less popular job

SELECT tc.job_during_journey from travel_cards AS tc
JOIN journeys AS j ON j.id=tc.journey_id
ORDER BY j.journey_end-j.journey_start DESC
LIMIT 1;

5.	 Section: Programmability
5.1  Get colonists count

CREATE FUNCTION udf_count_colonists_by_destination_planet (planet_name VARCHAR (30))
RETURNS INT 
BEGIN
DECLARE c_count INT;
SET c_count := (SELECT COUNT(colonist_id) FROM travel_cards AS tc
JOIN journeys AS j ON j.id = tc.journey_id
JOIN spaceports AS sp ON sp.id = j.destination_spaceport_id
JOIN planets as p ON p.id = sp.planet_id
WHERE p.`name` = planet_name);
RETURN c_count;
END

5.2  Modify spaceship

