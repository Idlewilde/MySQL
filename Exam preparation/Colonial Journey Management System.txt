1.	 Section: Database Overview

CREATE SCHEMA colonial_journey_management_system_db;

USE colonial_journey_management_system_db;

2.	 Section: Data Definition Language (DDL) 

CREATE TABLE planets(
id INT(11) PRIMARY KEY,
`name` VARCHAR(30)NOT NULL);

CREATE TABLE spaceports(
id INT(11) PRIMARY KEY,
`name` VARCHAR(50)NOT NULL,
planet_id INT(11),
CONSTRAINT fk_planet_id FOREIGN KEY (planet_id) REFERENCES planets (id));

CREATE TABLE spaceships(
id INT(11) PRIMARY KEY,
`name` VARCHAR(50) NOT NULL,
`manufacturer` VARCHAR(30)NOT NULL,
light_speed_rate INT(11) DEFAULT 0);

CREATE TABLE colonists(
id INT(11) PRIMARY KEY,
first_name VARCHAR(20) NOT NULL,
last_name VARCHAR(20) NOT NULL,
ucn CHAR(10) NOT NULL UNIQUE,
birth_date DATE NOT NULL);

CREATE TABLE journeys(
id INT(11) PRIMARY KEY,
journey_start DATETIME NOT NULL,
journey_end DATETIME NOT NULL,
purpose ENUM("Medical", "Technical", "Educational", "Military"),
destination_spaceport_id INT(11),
spaceship_id INT(11),
CONSTRAINT fk_spaceport_id FOREIGN KEY (destination_spaceport_id) REFERENCES spaceports (id),
CONSTRAINT fk_spaceship_id FOREIGN KEY (spaceship_id) REFERENCES spaceships (id));

CREATE TABLE travel_cards(
id INT(11) PRIMARY KEY,
card_number CHAR(10) NOT NULL UNIQUE,
job_during_journey ENUM("Pilot", "Engineer", "Trooper", "Cleaner", "Cook"),
colonist_id INT(11),
journey_id INT(11),
CONSTRAINT fk_journey_id FOREIGN KEY (journey_id) REFERENCES journeys (id),
CONSTRAINT fk_colonist_id FOREIGN KEY (colonist_id) REFERENCES colonists (id));

3.	 Section: Data Manipulation Language (DML)
3.1  Data insertion

INSERT INTO travel_cards (card_number, job_during_journey, colonist_id, journey_id)
SELECT IF(birth_date >= '1980-01-01', concat(year(birth_date), day(birth_date), left(ucn, 4)),
CONCAT(year(birth_date), month(birth_date), right(ucn, 4))) AS card_number,
CASE
WHEN id % 2 = 0 THEN 'Pilot'
WHEN id % 3 = 0 THEN 'Cook'
ELSE 'Engineer'
END
AS job_during_journey,
id,
LEFT(ucn,1) AS journey_id
FROM colonists
WHERE id BETWEEN 96 AND 100;

3.2  Data update

UPDATE journeys
SET purpose =
CASE
WHEN id % 2 = 0 THEN 'Medical'
WHEN id % 3 = 0 THEN 'Technical'
WHEN id % 5 = 0 THEN 'Educational'
WHEN id % 7 = 0 THEN 'Military'
END
WHERE id % 2 = 0 OR id % 3 = 0 OR id % 5 = 0 OR id % 7 = 0;

3.3  Data deletion

DELETE c
FROM colonists AS c
LEFT JOIN travel_cards AS t on c.id=t.colonist_id
WHERE t.colonist_id IS NULL;

4.	 Section: Querying 
4.1  Extract all travel cards

SELECT card_number, job_during_journey from travel_cards
ORDER BY card_number;

4.2  Extract all colonists

SELECT id, concat_ws(' ', first_name, last_name), ucn FROM colonists
ORDER BY first_name,last_name,id;

4.3	 Extract all military journeys
4.4  Extract all pilots
4.5	 Count all colonists that are on technical journey
4.6  Extract the fastest spaceship
4.7  Extract spaceships with pilots younger than 30 years
4.8  Extract all educational mission planets and spaceports
4.9  Extract all planets and their journey count
4.10 Extract the shortest journey
4.11 Extract the less popular job
5.	 Section: Programmability
5.1  Get colonists count
5.2  Modify spaceship

