0.	Section 0: Database Overview

CREATE SCHEMA instd;
USE instd;

1.	Section 1: Data Definition Language (DDL)

CREATE TABLE `photos`(
`id` INT AUTO_INCREMENT PRIMARY KEY,
`description` TEXT NOT NULL,
`date` DATETIME NOT NULL,
`views` INT NOT NULL DEFAULT 0);

CREATE TABLE `comments`(
`id` INT AUTO_INCREMENT PRIMARY KEY,
`comment` VARCHAR(255) NOT NULL,
`date` DATETIME NOT NULL,
`photo_id` INT NOT NULL,
CONSTRAINT fk_photo0_id FOREIGN KEY(photo_id) REFERENCES photos (id));

CREATE TABLE `users`(
`id` INT AUTO_INCREMENT PRIMARY KEY,
`username` VARCHAR(30) NOT NULL UNIQUE,
`password` VARCHAR(30) NOT NULL,
`email` VARCHAR(50) NOT NULL,
`gender` CHAR(1) NOT NULL,
`age` INT NOT NULL,
`job_title` VARCHAR(40) NOT NULL,
`ip` VARCHAR(30) NOT NULL);

CREATE TABLE `likes`(
`id` INT AUTO_INCREMENT PRIMARY KEY,
`photo_id` INT NOT NULL,
`user_id` INT NOT NULL,
CONSTRAINT fk_photo_id FOREIGN KEY(photo_id) REFERENCES photos (id),
CONSTRAINT fk_user_id FOREIGN KEY(user_id) REFERENCES users (id));

CREATE TABLE `users_photos`(
`photo_id` INT NOT NULL,
`user_id` INT NOT NULL,
CONSTRAINT fk_photo1_id FOREIGN KEY(photo_id) REFERENCES photos (id),
CONSTRAINT fk_user1_id FOREIGN KEY(user_id) REFERENCES users (id));

CREATE TABLE `addresses`(
`id` INT AUTO_INCREMENT PRIMARY KEY,
`address` VARCHAR(30) NOT NULL,
`town` VARCHAR(30) NOT NULL,
`country` VARCHAR(30) NOT NULL,
`user_id` INT NOT NULL,
CONSTRAINT fk_user2_id FOREIGN KEY(user_id) REFERENCES users (id));

2.	Section 2: Data Manipulation Language (DML)

2.1.	Insert

INSERT INTO addresses (address, town, country, user_id)
SELECT u.username,u.`password`,u.ip, u.age
FROM users as u
WHERE u.gender='M';

2.2.	Update

UPDATE addresses
SET `country` =
CASE
WHEN `country` LIKE 'B%' THEN 'Blocked'
WHEN `country` LIKE 'T%' THEN 'Test'
WHEN `country` LIKE 'P%' THEN 'In Progress'
END
WHERE `country` LIKE 'B%' OR `country` LIKE 'T%' OR `country` LIKE 'P%';

2.3.	Delete

DELETE a FROM addresses AS a 
WHERE a.id % 3 = 0;

3.	Section 3: Querying

3.1.	Users

SELECT username, gender, age FROM users
ORDER BY age DESC, username;

3.2.	Extract 5 Most Commented Photos

SELECT ph.id, ph.`date` AS date_and_time, ph.`description`, COUNT(c.id) AS commentsCount
FROM photos AS ph
JOIN comments AS c ON ph.id=c.photo_id
GROUP BY ph.id
ORDER BY commentsCount DESC,ph.id
LIMIT 5;

3.3. Lucky users

SELECT CONCAT(u.id," ",u.username), u.email FROM users AS u
JOIN users_photos AS uph ON u.id=uph.user_id
WHERE u.id=uph.photo_id
ORDER BY u.id;

3.4.	Count likes and comments

SELECT ph.id, 
(SELECT COUNT(l.id) FROM likes AS l WHERE l.photo_id=ph.id) AS likes_count,
(SELECT COUNT(c.id) FROM comments AS c WHERE c.photo_id=ph.id) AS comments_count
FROM photos AS ph
GROUP BY ph.id
ORDER BY  likes_count DESC, comments_count DESC, ph.id;

3.5.	The Photo on the Tenth Day of the Month

SELECT CONCAT(LEFT(`description`,30),"..."), `date` FROM photos
WHERE DAY(`date`)=10
ORDER BY `date` DESC;

4.	Section 4: Programmability

4.1.	Get Userâ€™s Photos Count

4.2.	Increase User Age

