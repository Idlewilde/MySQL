0.	Section 0: Database Overview

CREATE SCHEMA softuni_stores_system;
USE softuni_stores_system;

1.	Section 1: Data Definition Language (DDL)

CREATE TABLE pictures (
id INT PRIMARY KEY AUTO_INCREMENT,
`url` VARCHAR(100) NOT NULL,
added_on DATETIME NOT NULL);

CREATE TABLE categories (
id INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE);

CREATE TABLE products (
id INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE,
best_before DATE,
price DECIMAL(10,2) NOT NULL,
`description` TEXT,
category_id INT NOT NULL,
picture_id INT NOT NULL,
CONSTRAINT fk_cat FOREIGN KEY(category_id) REFERENCES categories(id),
CONSTRAINT fk_pic FOREIGN KEY(picture_id) REFERENCES pictures(id));

CREATE TABLE towns (
id INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(20) NOT NULL UNIQUE);

CREATE TABLE addresses (
id INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL UNIQUE,
town_id INT NOT NULL,
CONSTRAINT fk_tw FOREIGN KEY(town_id) REFERENCES towns(id));

CREATE TABLE stores (
id INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(20) NOT NULL UNIQUE,
rating FLOAT NOT NULL,
has_parking BOOLEAN DEFAULT FALSE,
address_id INT NOT NULL,
CONSTRAINT fk_add FOREIGN KEY(address_id) REFERENCES addresses(id));

CREATE TABLE products_stores (
product_id INT NOT NULL,
store_id INT NOT NULL,
CONSTRAINT pk_pr_str PRIMARY KEY (product_id, store_id),
CONSTRAINT fk_prd FOREIGN KEY(product_id) REFERENCES products(id),
CONSTRAINT fk_str FOREIGN KEY(store_id) REFERENCES stores(id));

CREATE TABLE employees (
id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(15) NOT NULL,
middle_name CHAR(1),
last_name VARCHAR(20) NOT NULL,
salary DECIMAL(19,2) NOT NULL DEFAULT 0,
hire_date DATE NOT NULL,
manager_id INT NOT NULL,
store_id INT NOT NULL,
CONSTRAINT fk_man FOREIGN KEY(manager_id) REFERENCES employees(id),
CONSTRAINT fk_strr FOREIGN KEY(store_id) REFERENCES stores(id));

2.	Section 2: Data Manipulation Language (DML)
2.1.	Insert
2.2.	Update
2.3.	Delete

3.	Section 3: Querying
3.1.	Employees
3.2.	Products with old pictures
3.3.	Counts of products in stores
3.4.	Specific employee
3.5.  Find all information of stores

4.	Section 4: Programmability
4.1.	Find name of top paid employee by store name
4.2.	Update product price by address

