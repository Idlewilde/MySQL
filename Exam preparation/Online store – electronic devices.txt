0.	Section 0: Database Overview

CREATE SCHEMA online_store;
USE online_store;

1.	Section 1: Data Definition Language (DDL)

CREATE TABLE brands (
id INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE);

CREATE TABLE categories (
id INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE);

CREATE TABLE reviews (
id INT PRIMARY KEY AUTO_INCREMENT,
content TEXT,
rating DECIMAL(10,2) NOT NULL,
picture_url VARCHAR(80) NOT NULL,
published_at DATETIME NOT NULL);

CREATE TABLE products (
id INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL,
price DECIMAL(19,2) NOT NULL,
quantity_in_stock INT,
`description` TEXT,
brand_id INT NOT NULL,
category_id INT NOT NULL, 
review_id INT,
CONSTRAINT fk_br_id FOREIGN KEY (brand_id) REFERENCES brands(id),
CONSTRAINT fk_cat_id FOREIGN KEY (category_id) REFERENCES categories(id),
CONSTRAINT fk_rw_id FOREIGN KEY (review_id) REFERENCES reviews(id));

CREATE TABLE customers (
id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(20) NOT NULL,
last_name VARCHAR(20) NOT NULL,
phone VARCHAR(30) NOT NULL UNIQUE,
address VARCHAR(60) NOT NULL,
discount_card BIT NOT NULL DEFAULT FALSE);

CREATE TABLE orders (
id INT PRIMARY KEY AUTO_INCREMENT,
order_datetime DATETIME NOT NULL,
customer_id INT NOT NULL,
CONSTRAINT fk_cst_id FOREIGN KEY (customer_id) REFERENCES customers(id));

CREATE TABLE orders_products (
order_id INT,
product_id INT, 
CONSTRAINT fk_order_id FOREIGN KEY (order_id) REFERENCES orders(id),
CONSTRAINT fk_product_id FOREIGN KEY (product_id) REFERENCES products(id));

2.	Section 2: Data Manipulation Language (DML)

2.1.	Insert

INSERT INTO reviews (content, picture_url, published_at, rating)
SELECT SUBSTRING(p.`description`,1,15),REVERSE(p.`name`),'2010-10-10',p.price/8
FROM products as p
WHERE p.id>=5;

2.2.	Update

UPDATE products AS p 
SET p.quantity_in_stock=p.quantity_in_stock-5
WHERE p.quantity_in_stock>=60 AND p.quantity_in_stock<=70;

2.3.	Delete

DELETE c FROM customers AS c
LEFT JOIN orders AS o ON o.customer_id=c.id
WHERE o.id IS NULL;

3.	Section 3: Querying

3.1.	Categories

SELECT id, `name` FROM categories
ORDER BY `name` DESC;

3.2.	Quantity

SELECT id, brand_id, `name`, quantity_in_stock FROM products
WHERE price>1000 AND quantity_in_stock<30
ORDER BY quantity_in_stock,id;

3.3.	Review

SELECT id, content, rating, picture_url,published_at FROM reviews
WHERE SUBSTRING(content,1,2)='My' AND LENGTH(content)>61
ORDER BY rating DESC;

3.4. 	First customers

SELECT CONCAT(c.first_name, " ", c.last_name) AS full_name, c.address, o.order_datetime
FROM customers AS c
JOIN orders AS o ON c.id=o.customer_id
WHERE YEAR(o.order_datetime)<=2018
ORDER BY full_name DESC;

3.5.	Best categories

SELECT COUNT(p.id) AS items_count, c.`name`, SUM(p.quantity_in_stock) AS total_quantity
FROM categories AS c
JOIN products AS p ON c.id=p.category_id
GROUP BY c.id
ORDER BY items_count DESC, total_quantity
LIMIT 5;

4.	Section 4: Programmability

4.1.  Extract client cards count

CREATE FUNCTION udf_customer_products_count(`name` VARCHAR(30)) 
RETURNS INT 
DETERMINISTIC
BEGIN
	DECLARE e_count INT;
	SET e_count := (SELECT COUNT(p.id) FROM customers AS c
     JOIN orders AS o ON c.id=o.customer_id
     JOIN orders_products AS op ON o.id=op.order_id
     JOIN products AS p ON op.product_id=p.id
     WHERE c.first_name=`name`
     GROUP BY c.id);
	RETURN e_count;
END

4.2.	Reduce price

CREATE PROCEDURE udp_reduce_price (category_name VARCHAR(50))
BEGIN
  UPDATE products AS p
  JOIN categories AS c ON p.category_id=c.id
  JOIN reviews AS r ON p.review_id=r.id
SET p.price = p.price*0.7
WHERE c.`name`=category_name AND r.rating<4;
END

